log4j.rootLogger={{ env["KSQL_LOG4J_ROOT_LOGLEVEL"] | default('INFO') }}, stdout

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n

# To achieve high throughput on pull queries, avoid logging every request from Jetty
log4j.logger.io.confluent.rest-utils.requests=WARN

{% if env['KSQL_LOG4J_PROCESSING_LOG_BROKERLIST'] %}
log4j.appender.kafka_appender=org.apache.kafka.log4jappender.KafkaLog4jAppender
log4j.appender.kafka_appender.layout=io.confluent.common.logging.log4j.StructuredJsonLayout
log4j.appender.kafka_appender.BrokerList={{ env["KSQL_LOG4J_PROCESSING_LOG_BROKERLIST"] | default('localhost:9092') }}
log4j.appender.kafka_appender.Topic={{ env["KSQL_LOG4J_PROCESSING_LOG_TOPIC"] | default('default_ksql_processing_log') }}
log4j.logger.processing=ERROR, kafka_appender
{% endif %}

{% if env['KSQL_LOG4J_LOGGERS'] %}
{% set loggers = parse_log4j_loggers(env['KSQL_LOG4J_LOGGERS']) %}
{% for logger,loglevel in loggers.items() %}
log4j.logger.{{logger}}={{loglevel}}, stdout
{% endfor %}
{% endif %}

# allow users to set whatever LOG4J configurations they want
{% set kr_props = env_to_props('LOG4J_', '') -%}
{% for name, value in kr_props.items() -%}
{{name}}={{value}}
{% endfor -%}
