log4j.rootLogger={{ getEnv "KSQL_LOG4J_ROOT_LOGLEVEL" "INFO" }}, stdout

log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n

# To achieve high throughput on pull queries, avoid logging every request from Jetty
log4j.logger.io.confluent.rest-utils.requests=WARN

{{- if getEnv "KSQL_LOG4J_PROCESSING_LOG_BROKERLIST" "" -}}
log4j.appender.kafka_appender=org.apache.kafka.log4jappender.KafkaLog4jAppender
log4j.appender.kafka_appender.layout=io.confluent.common.logging.log4j.StructuredJsonLayout
log4j.appender.kafka_appender.BrokerList={{ getEnv "KSQL_LOG4J_PROCESSING_LOG_BROKERLIST" "localhost:9092" }}
log4j.appender.kafka_appender.Topic={{ getEnv "KSQL_LOG4J_PROCESSING_LOG_TOPIC" "default_ksql_processing_log" }}
log4j.logger.processing=ERROR, kafka_appender
{{- end -}}

{{ $loggers := getEnv "KSQL_LOG4J_LOGGERS" "" -}}
{{ range $k, $v := splitToMapDefaults ","  "" $loggers}}
log4j.logger.{{ $k }}={{ $v }}, stdout
{{ end }}

# allow users to set whatever LOG4J configurations they want
{{- $kr_props := envToProps "LOG4J_" "" nil -}}
{{ range $k, $v := $kr_props }}
{{ $k }}={{ $v }}
{{ end }}c